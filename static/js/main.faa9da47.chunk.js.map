{"version":3,"sources":["components/Home.js","App.js","components/Projects.js","serviceWorker.js","components/PageNotFound.js","index.js"],"names":["Home","className","Component","App","Projects","React","Boolean","window","location","hostname","match","PageNotFound","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAGqBA,G,uLAEb,OACI,yBAAKC,UAAU,QACX,oCACA,2BAAG,4CACH,ghB,GANkBC,cCWnBC,G,uLARX,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,W,GAJUC,c,eCGHE,E,iLAHX,OAAO,4C,GAFYC,IAAMH,WCUTI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCdSC,EAFM,kBAAM,+ECQrBC,EACF,kBAAC,IAAD,KACE,6BACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,YAAYC,UAAWX,IACzC,kBAAC,IAAD,CAAOW,UAAWJ,OAM9BK,IAASC,OAAOL,EAASM,SAASC,eAAe,SF2G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.faa9da47.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './Home.css'\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <h1>HOME</h1>\r\n                <p><b>Hi, I'm Tom!</b></p>\r\n                <p>\r\n                    I'm currently a software developer at CGI, working in the defence sector. \r\n                    Nottingham Trent University graduate with a First Class Honours in Computer Science (Games Technology). My final year project involved creating a virtual reality interactive model of the human heart to assess its usefulness as an alternative learning style for medical students (as compared to 2D diagrams and textbooks).\r\n                    I play drums, games, and like to learn about new software technologies. And love a bit of metal.\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component} from 'react';\r\nimport Home from './components/Home'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Home></Home>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\n\r\nclass Projects extends React.Component {\r\n  render() {\r\n    return <h1>Projects</h1>\r\n  }\r\n}\r\nexport default Projects","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nconst PageNotFound = () => <h1>Page not found, maybe I've not built that yet!</h1>\r\n\r\nexport default PageNotFound","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom'\r\nimport Projects from './components/Projects';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\nimport PageNotFound from './components/PageNotFound';\r\n\r\nconst routing = (\r\n    <Router>\r\n      <div>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route exact path=\"/projects\" component={Projects} />\r\n            <Route component={PageNotFound}/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n\r\nReactDOM.render(routing, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}