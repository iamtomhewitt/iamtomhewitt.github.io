{"version":3,"sources":["containers/Home.js","containers/PageNotFound.js","containers/Experience.js","containers/Projects.js","containers/Contact.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Component","Experience","Projects","Contact","Switch","Route","path","exact","component","PageNotFound","App","Navbar","fluid","collapseOnSelect","Header","Brand","Link","to","Toggle","Collapse","Nav","pullRight","NavItem","Routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAGqBA,G,uLAEb,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,UACX,4CACA,wGACA,gWACA,2I,GARcC,cCAnB,G,MAAA,kBACb,yBAAKD,UAAU,gBACb,+CACA,kECHiBE,G,uLAEb,OACI,yBAAKF,UAAU,cACX,0CACA,0H,GALwBC,cCAnBE,G,uLAEb,OACI,yBAAKH,UAAU,YACX,wCACA,0K,GALsBC,cCAjBG,G,uLAEb,OACI,yBAAKJ,UAAU,WACX,4C,GAJqBC,cCMtB,oBACb,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWV,IACjC,kBAACO,EAAA,EAAD,CAAOC,KAAK,cAAcC,OAAK,EAACC,UAAWP,IAC3C,kBAACI,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAK,EAACC,UAAWN,IACzC,kBAACG,EAAA,EAAD,CAAOC,KAAK,WAAWC,OAAK,EAACC,UAAWL,IAGxC,kBAACE,EAAA,EAAD,CAAOG,UAAWC,M,2CCsBPC,G,uLA7BX,OACE,yBAAKX,UAAU,iBACb,kBAACY,EAAA,EAAD,CAAQC,OAAK,EAACC,kBAAgB,GAC5B,kBAACF,EAAA,EAAOG,OAAR,KACE,kBAACH,EAAA,EAAOI,MAAR,KACE,kBAACC,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEF,kBAACN,EAAA,EAAOO,OAAR,OAEF,kBAACP,EAAA,EAAOQ,SAAR,KACE,kBAACC,EAAA,EAAD,CAAKC,WAAS,GACZ,kBAAC,gBAAD,CAAeJ,GAAG,eAChB,kBAACK,EAAA,EAAD,oBAEF,kBAAC,gBAAD,CAAeL,GAAG,aAChB,kBAACK,EAAA,EAAD,kBAEF,kBAAC,gBAAD,CAAeL,GAAG,YAChB,kBAACK,EAAA,EAAD,oBAKR,kBAACC,EAAD,W,GAzBUvB,c,OCIEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.08892c14.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Home.css\";\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <div className=\"lander\">\r\n                    <h1>Hi, I'm Tom!</h1>\r\n                    <p>I'm currently a software developer at CGI, working in the defence sector.</p>\r\n                    <p>Nottingham Trent University graduate with a First Class Honours in Computer Science (Games Technology). My final year project involved creating a virtual reality interactive model of the human heart to assess its usefulness as an alternative learning style for medical students (as compared to 2D diagrams and textbooks).</p>\r\n                    <p>â€‹I play drums, games, and like to learn about new software technologies. And love a bit of metal.</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./PageNotFound.css\";\r\n\r\nexport default () =>\r\n  <div className=\"PageNotFound\">\r\n    <h3>Page not found!</h3>\r\n    <p>I might not have built this yet!</p>\r\n  </div>;\r\n","import React, { Component } from \"react\";\r\nimport \"./Experience.css\";\r\n\r\nexport default class Experience extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Experience\">\r\n                <h1>Experience</h1>\r\n                <p>List of my experience like LinkedIn. Perhaps there is a LinkedIn api that I could use?</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Projects.css\";\r\n\r\nexport default class Projects extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Projects\">\r\n                <h1>Projects</h1>\r\n                <p>This is where a table of my projects live. This could be manual, or an API request to my github listing all of my projects in a table.</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Contact.css\";\r\n\r\nexport default class Contact extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Contact\">\r\n                <h1>Contact</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./containers/Home\";\r\nimport PageNotFound from \"./containers/PageNotFound\";\r\nimport Experience from \"./containers/Experience\";\r\nimport Projects from \"./containers/Projects\";\r\nimport Contact from \"./containers/Contact\";\r\n\r\n\r\nexport default () =>\r\n  <Switch>\r\n    <Route path=\"/\" exact component={Home} />\r\n    <Route path=\"/experience\" exact component={Experience} />\r\n    <Route path=\"/projects\" exact component={Projects} />\r\n    <Route path=\"/contact\" exact component={Contact} />\r\n\r\n    { /* Catch all unmatched routes */}\r\n    <Route component={PageNotFound} />\r\n  </Switch>;\r\n","import React, { Component } from \"react\";\nimport Routes from \"./Routes\";\nimport { Link } from \"react-router-dom\";\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App container\">\n        <Navbar fluid collapseOnSelect>\n          <Navbar.Header>\n            <Navbar.Brand>\n              <Link to=\"/\">Home</Link>\n            </Navbar.Brand>\n            <Navbar.Toggle />\n          </Navbar.Header>\n          <Navbar.Collapse>\n            <Nav pullRight>\n              <LinkContainer to=\"/experience\">\n                <NavItem>Experience</NavItem>\n              </LinkContainer>\n              <LinkContainer to=\"/projects\">\n                <NavItem>Projects</NavItem>\n              </LinkContainer>\n              <LinkContainer to=\"/contact\">\n                <NavItem>Contact</NavItem>\n              </LinkContainer>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Routes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport App from './App';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n    document.getElementById(\"root\")\n  );\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}